// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Khalid Al-Hawaj

////////////////////////////////////////////////////////////////////
//
// RoCC Interface Instructions
//

def template RoccDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {
      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateReq(ExecContext *, Trace::InstRecord *) const override;
        Fault completeReq(PacketPtr, ExecContext *,
                          Trace::InstRecord *) const override;
    };
}};

// Rocc instruction class constructor template.
def template RoccConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(constructor)s;

        // Instruction flags
        xd  = (XD  == 1);
        xs1 = (XS1 == 1);
        xs2 = (XS2 == 1);

        // Register Specifiers
        rd  = RD ;
        rs1 = RS1;
        rs2 = RS2;

        // Other stuff ... :)
        opcode = OPCODE;
        funct  = FUNCT7;
    }
}};

// Rocc instruction class execute method template.
def template RoccExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;
        if (fault == NoFault) {
            if (fault == NoFault) {
                %(op_wb)s;
            }
        }
        return fault;
    }
}};

// RoCC initiate request template
def template RoccInitiateReq {{
    Fault
    %(class_name)s::initiateReq(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        %(op_src_decl)s;
        %(op_rd)s;

        //Initialize inputs
        uint64_t rd_data  = 0;
        uint64_t rs1_data = 0;
        uint64_t rs2_data = 0;

        %(input_code)s;

        if (fault == NoFault) {
            fault = initiateRoccReq(xc, traceData,
                                    (void*)0, opcode, funct,
                                    xd,  rd,  rd_data,
                                    xs1, rs1, rs1_data,
                                    xs2, rs2, rs2_data);
        }

        return fault;
    }
}};

// RoCC complete request template
def template RoccCompleteReq {{
    Fault
    %(class_name)s::completeReq(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;

        // Output
        bool     rd_x;
        uint64_t rd_id;
        uint64_t rd_data;

        // Parse incoming data
        parseRoccResponse(xc, traceData, pkt,
                          rd_x, rd_id, rd_data);

        if (fault == NoFault) {
            // Sanity Check
            assert(rd_x == xd);
            assert(!xd || (rd_id == rd));

            // Output Code
            %(output_code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }
}};

// Rocc decode template.
def template RoccDecode {{
    return new %(class_name)s(machInst);
}};

// RoCC Format
def format RoccOp(input_code, output_code, *flags) {{
    iop = InstObjParams(name, Name, 'RoccOp',
                            {'input_code':input_code,
                             'output_code':output_code},
                        flags)
    header_output = RoccDeclare.subst(iop)
    decoder_output = RoccConstructor.subst(iop)
    decode_block = RoccDecode.subst(iop)
    exec_output = (RoccExecute.subst(iop)  +
                   RoccInitiateReq.subst(iop) +
                   RoccCompleteReq.subst(iop))
}};
